#!/usr/bin/python3

from pathlib import Path
import os
import re
import subprocess
import sys
import time
import shutil

# Function to list running VMs and their corresponding ports
def get_running_vms():
    pgrep_result = subprocess.run(["pgrep", "qemu"], capture_output=True, text=True)
    pid = pgrep_result.stdout.strip()
    if not pid:
        print("No qemu process found.")
        return []

    ps_result = subprocess.run(["ps", "-p", pid, "-o", "args=", "-ww"], capture_output=True, text=True)
    name_match = re.search(r'/([\w\-]+)\.qcow2', ps_result.stdout)
    port_match = re.search(r'hostfwd=tcp::(\d+)', ps_result.stdout)
    if name_match and port_match:
        return [{"name": name_match.group(1), "port": port_match.group(1)}]

    return []

# Function to SSH into a VM using the correct port
def ssh_vm(vm_name):
    vms = get_running_vms()
    for vm in vms:
        if vm['name'] == vm_name:
            port = vm['port']
            print(f"Connecting to {vm_name} on port {port}...")
            exec_cmd(["ssh", "127.0.0.1", "-o", "StrictHostKeyChecking=no", "-p", port])
            return

    print(f"No running VM found with name {vm_name}.")

# Function to copy SSH key to the VM using the correct port
def ssh_copy_id(vm_name):
    vms = get_running_vms()
    for vm in vms:
        if vm['name'] == vm_name:
            port = vm['port']
            print(f"Copying SSH key to {vm_name} on port {port}...")
            exec_cmd(["ssh-copy-id", "-p", port, "127.0.0.1"])
            return

    print(f"No running VM found with name {vm_name}.")

# Function to list running VMs
def list_running_vms():
    pses = get_running_vms()
    name_width = len("NAME")
    port_width = len("PORT")
    for ps in pses:
        name_width = max(name_width, len(ps["name"]))
        port_width = max(port_width, len(ps["port"]))

    print(f"{'NAME':<{name_width}} {'PORT':<{port_width}}")
    for ps in pses:
        print(f"{ps['name']:<{name_width}} {ps['port']:<{port_width}}")


def human_duration(d):
    if d < 1:
        return "Less than a second"
    elif d == 1:
        return "1 second"
    elif d < 60:
        return f"{d} seconds"
    elif d < 120:
        return "1 minute"
    elif d < 3600:
        return f"{d // 60} minutes"
    elif d < 7200:
        return "1 hour"
    elif d < 86400:
        return f"{d // 3600} hours"
    elif d < 172800:
        return "1 day"
    elif d < 604800:
        return f"{d // 86400} days"
    elif d < 1209600:
        return "1 week"
    elif d < 2419200:
        return f"{d // 604800} weeks"
    elif d < 4838400:
        return "1 month"
    elif d < 31536000:
        return f"{d // 2419200} months"
    elif d < 63072000:
        return "1 year"
    else:
        return f"{d // 31536000} years"


def list_files_by_modification():
    return sorted(Path().rglob("*"), key=lambda p: os.path.getmtime(p), reverse=True)


def list_vms():
    mycwd = os.getcwd()
    os.chdir(get_vm_store())
    vms = []

    # Collect vm data
    for path in list_files_by_modification():
        name = str(path)
        file_epoch = path.lstat().st_mtime
        modified = int(time.time() - file_epoch)
        size = subprocess.run(["du", "-h", str(path.resolve())], capture_output=True, text=True).stdout.split()[0]
        name = name[:-6]

        # Store data for later use
        vms.append({"name": name, "modified": modified, "size": size})

    os.chdir(mycwd)
    return vms


def list_images():
    vms = list_vms()

    # Calculate maximum width for each column
    name_width = len("NAME")
    modified_width = len("MODIFIED")
    size_width = len("SIZE")
    for vm in vms:
        modified = human_duration(vm["modified"]) + " ago"
        name_width = max(name_width, len(vm["name"]))
        modified_width = max(modified_width, len(modified))
        size_width = max(size_width, len(vm["size"]))

    print(f"{'NAME':<{name_width}} {'MODIFIED':<{modified_width}} {'SIZE':<{size_width}}")
    for vm in vms:
        print(f"{vm['name']:<{name_width}} {modified:<{modified_width}} {vm['size']:<{size_width}}")


# Function to run a VM
def run_vm(image_name, cdrom, graphic):
    image_path = os.path.join(get_vm_store(), image_name)
    if not os.path.exists(image_path):
        print(f"Image {image_name} does not exist!")
        return

    print(f"Starting VM {image_name}...")
    cmd = [
        "qemu-system-aarch64",
        "-device",
        "virtio-gpu-pci",
        "-display",
        "default,show-cursor=on",
        "-device",
        "qemu-xhci",
        "-device",
        "usb-kbd",
        "-device",
        "usb-tablet",
        "-drive",
        "file=/opt/homebrew/share/qemu/edk2-aarch64-code.fd,if=pflash,format=raw,unit=0,readonly=on",
        "-drive",
        "file=/opt/homebrew/share/qemu/edk2-arm-vars.fd,if=pflash,format=raw,unit=1,snapshot=on,readonly=off",
        "-smp",
        str(os.cpu_count()),
        "-accel",
        "hvf",
        "-m",
        highest_power_of_2(get_total_ram_macos()),
        "-machine",
        "virt",
        "-cpu",
        "host",
        "-device",
        "virtio-net-pci,netdev=n0,mac=FE:40:64:26:D6:FF",
        "-netdev",
        "user,id=n0,net=10.0.2.0/24,hostfwd=tcp::2222-:22",
        "-drive",
        f"file={image_name},index=0,media=disk,format=qcow2,if=virtio,id=rootdisk,snapshot=off"
    ]

    if not graphic:
        cmd += [ "-nographic" ]

    if cdrom:
        cmd += [ "-cdrom", cdrom ]

    exec_cmd(cmd)

def perror(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def exec_cmd(args, stderr=True):
    if False:
        print(*args)

    if not stderr:
        # Redirecting stderr to /dev/null
        with open(os.devnull, "w") as devnull:
            os.dup2(devnull.fileno(), sys.stderr.fileno())

    try:
        return os.execvp(args[0], args)
    except Exception:
        perror(f"os.execvp({args[0]}, {args})")
        raise

# Function to create a VM image
def create_vm(image_name):
    image_path = os.path.join(get_vm_store(), image_name) + ".qcow2"
    if os.path.exists(image_path):
        print(f"Image {image_name} already exists!")
        return

    statvfs = os.statvfs(".")
    free_space = statvfs.f_bavail * statvfs.f_frsize
    size = 1073741824 # 1 GB
    while size * 2 < free_space:
        size *= 2

    print(f"Creating new VM image {image_name} with size {size}...")
    exec_cmd(["qemu-img", "create", "-f", "qcow2", image_path, f"{size}"])

# Function to stop a running VM (by killing the QEMU process)
def stop_vm(image_name):
    print(f"Stopping VM {image_name}...")
    result = subprocess.run(['pgrep', '-f', image_name], capture_output=True, text=True)
    if result.stdout:
        pid = result.stdout.strip()
        os.kill(int(pid), 9)
        print(f"VM {image_name} stopped.")
        return

    print(f"No running VM found with image {image_name}.")

# Function to delete a VM image
def delete_vm(image_name):
    image_path = os.path.join(VM_PATH, image_name)
    if os.path.exists(image_path):
        print(f"Deleting VM image {image_name}...")
        os.remove(image_path)
        return

    print(f"Image {image_name} does not exist!")

def get_vm_store():
    if os.geteuid() == 0:
        return "/var/lib/boringvm/vms"

    return os.path.expanduser("~/.local/share/boringvm/vms")

def mkdir():
    os.makedirs(get_vm_store(), exist_ok=True)

def get_total_ram_macos():
    total_ram_bytes = subprocess.run(['sysctl', '-n', 'hw.memsize'], capture_output=True, text=True)
    return int(total_ram_bytes.stdout)

def highest_power_of_2(n):
    power = 1073741824 # 1 GB
    while power * 2 < n:
        power *= 2

    return f"{power}B"

def main():
    if len(sys.argv) < 2:
        print("usage: boringvm <command> [<args>]")
        return

    mkdir()
    command = sys.argv[1]
    if command == "ps":
        list_running_vms()
    elif command == "images":
        list_images()
    elif command == "run":
        if len(sys.argv) < 3:
            print("usage: boringvm run <image_name>")
            return

        if "--cdrom" in sys.argv:
            cdrom = sys.argv[sys.argv.index("--cdrom") + 1]
        else:
            cdrom = False

        if "--graphic" in sys.argv:
            graphic = True
        else:
            graphic = False

        image_name = sys.argv[2]
        image_name = f"{get_vm_store()}/{image_name}.qcow2"
        run_vm(image_name, cdrom, graphic)
    elif command == "create":
        if len(sys.argv) < 3:
            print("usage: boringvm create <image_name>")
            return

        image_name = sys.argv[2]
        create_vm(image_name)
    elif command == "ssh":
        if len(sys.argv) < 3:
            print("usage: boringvm ssh <vm_name>")
            return

        vm_name = sys.argv[2]
        ssh_vm(vm_name)
    elif command == "ssh-copy-id":
        if len(sys.argv) < 3:
            print("usage: boringvm ssh-copy-id <vm_name>")
            return

        vm_name = sys.argv[2]
        ssh_copy_id(vm_name)
    elif command == "stop":
        if len(sys.argv) < 3:
            print("usage: boringvm stop <image_name>")
            return

        image_name = sys.argv[2]
        stop_vm(image_name)
    elif command == "rm":
        if len(sys.argv) < 3:
            print("usage: boringvm rm <image_name>")
            return

        image_name = sys.argv[2]
        delete_vm(image_name)
    else:
        print(f"Unknown command: {command}")

if __name__ == "__main__":
    main()

