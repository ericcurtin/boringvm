#!/usr/bin/python3

import argparse
from pathlib import Path
import os
import re
import platform
import signal
import subprocess
import sys
import time
import socket


def find_open_port(start_port=2222):
    port = start_port
    while True:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            try:
                s.bind(("localhost", port))  # Double bracket deliberate
                return port  # if successful, return the open port
            except OSError:
                port += 1  # if the port is in use, try the next one


def get_cmdline_macos(pid):
    return qx(["ps", "-p", pid, "-o", "args=", "-ww"])


def get_cmdline_linux(pid):
    with open(f"/proc/{pid}/cmdline", "r") as f:
        cmdline = f.read().replace("\0", " ")

    return cmdline


def get_running_vms():
    pids = qx(["pgrep", "qemu"])
    ret = []
    if not pids:
        return ret

    for pid in pids.splitlines():
        if sys.platform == "darwin":
            ps_result = get_cmdline_macos(pid)
        else:
            ps_result = get_cmdline_linux(pid)

        name_match = re.search(r"/vms/([^/]+)\.qcow2", ps_result)
        if name_match:
            name = name_match.group(1)
        else:
            name = ""

        port_match = re.search(r"hostfwd=tcp::(\d+)", ps_result)
        if port_match:
            port = port_match.group(1)
        else:
            port = ""

        ret.append(
            {
                "name": name,
                "port": port,
                "pid": pid,
            }
        )

    return ret


def get_dest_and_port(vm_name):
    vms = get_running_vms()
    if "@" in vm_name:
        user, host = vm_name.split("@")
        dest = f"{user}@127.0.0.1"
    else:
        user, host = None, vm_name
        dest = "127.0.0.1"

    for vm in vms:
        if vm["name"] == host:
            return dest, vm["port"]

    return None, None


def ssh_vm(vm_name):
    dest, port = get_dest_and_port(vm_name)
    if not dest:
        return print(f"No running vm found with name {vm_name}.")

    print(f"Connecting to {vm_name} on port {port}")
    return exec_cmd(
        [
            "ssh",
            dest,
            "-o",
            "UserKnownHostsFile=/dev/null",
            "-o",
            "StrictHostKeyChecking=no",
            "-p",
            port,
        ]
    )


def ssh_copy_id(vm_name):
    dest, port = get_dest_and_port(vm_name)
    if not dest:
        return print(f"No running vm found with name {vm_name}.")

    print(f"Copying ssh key to {vm_name} on port {port}")
    return exec_cmd(
        [
            "ssh-copy-id",
            "-o",
            "UserKnownHostsFile=/dev/null",
            "-o",
            "StrictHostKeyChecking=no",
            "-p",
            port,
            dest,
        ]
    )


def list_running_vms():
    pses = get_running_vms()
    name_w = len("NAME")
    port_w = len("SSH")
    pid_w = len("PID")
    for ps in pses:
        name_w = max(name_w, len(ps["name"]))
        port_w = max(port_w, len(ps["port"]))
        pid_w = max(pid_w, len(ps["pid"]))

    print(f"{'NAME':<{name_w}} {'SSH':<{port_w}} {'PID':<{pid_w}}")
    for ps in pses:
        row = (
            f"{ps['name']:<{name_w}} "
            f"{ps['port']:<{port_w}} "
            f"{ps['pid']:<{pid_w}}"
        )
        print(row)


def human_duration(d):
    if d < 1:
        return "Less than a second"
    elif d == 1:
        return "1 second"
    elif d < 60:
        return f"{d} seconds"
    elif d < 120:
        return "1 minute"
    elif d < 3600:
        return f"{d // 60} minutes"
    elif d < 7200:
        return "1 hour"
    elif d < 86400:
        return f"{d // 3600} hours"
    elif d < 172800:
        return "1 day"
    elif d < 604800:
        return f"{d // 86400} days"
    elif d < 1209600:
        return "1 week"
    elif d < 2419200:
        return f"{d // 604800} weeks"
    elif d < 4838400:
        return "1 month"
    elif d < 31536000:
        return f"{d // 2419200} months"
    elif d < 63072000:
        return "1 year"

    return f"{d // 31536000} years"


def list_files_by_modification():
    return sorted(
        Path().rglob("*"), key=lambda p: os.path.getmtime(p), reverse=True
    )


def human_readable_size(size):
    for unit in ["B", "KB", "MB", "GB", "TB"]:
        if size < 1024:
            size = round(size, 2)
            return f"{size} {unit}"

        size /= 1024

    return f"{size} PB"


def get_size(file):
    return human_readable_size(os.path.getsize(file))


def list_vms():
    mycwd = os.getcwd()
    os.chdir(get_vm_store())
    vms = []

    # collect vm data
    for path in list_files_by_modification():
        name = str(path)
        file_epoch = path.lstat().st_mtime
        modified = int(time.time() - file_epoch)
        size = get_size(path)
        name = name[:-6]

        # store data for later use
        vms.append({"name": name, "modified": modified, "size": size})

    os.chdir(mycwd)
    return vms


def list_images():
    vms = list_vms()

    # calculate maximum width for each column
    name_w = len("NAME")
    mod_w = len("MODIFIED")
    size_w = len("SIZE")
    for vm in vms:
        modified = human_duration(vm["modified"]) + " ago"
        name_w = max(name_w, len(vm["name"]))
        mod_w = max(mod_w, len(modified))
        size_w = max(size_w, len(vm["size"]))

    print(f"{'NAME':<{name_w}} {'MODIFIED':<{mod_w}} {'SIZE':<{size_w}}")
    for vm in vms:
        print(
            f"{vm['name']:<{name_w}} {modified:<{mod_w}} {vm['size']:<{size_w}}"
        )


def vm_image_exists(vm_name):
    vm_fn = get_vm_fn(vm_name)
    if not os.path.exists(vm_fn):
        print(f"Image {vm_name} does not exist!")
        return False

    return True


def get_vm_fn(vm_name):
    return os.path.join(get_vm_store(), vm_name) + ".qcow2"


def exists(arg):
    return os.path.exists(arg)


def find_ovmf():
    dirs = [
        "~/.local/share/ovmf",
        "/usr/share/OVMF",
        "/usr/share/edk2/ovmf",
    ]
    for d in dirs:
        path = os.path.expanduser(d)
        if exists(f"{path}/OVMF_CODE.fd") and exists(f"{path}/OVMF_VARS.fd"):
            return path

    raise RuntimeError("Could not find OMVF")


qemu_dirs = [
    "/usr/local/share/qemu",
    "/opt/homebrew/share/qemu",
    "/usr/share/edk2/aarch64",
    "/usr/share/qemu",
]


# location can differ depending on how qemu is installed
def find_edk2():
    for path in qemu_dirs:
        if os.path.exists(path):
            return path

    raise RuntimeError("Could not find edk2 directory")


def find_edk2_code_fd():
    files = ["QEMU_EFI.fd", "edk2-aarch64-code.fd"]

    for d in qemu_dirs:
        for f in files:
            dir_and_file = os.path.join(d, f)
            if os.path.exists(dir_and_file):
                return dir_and_file

    raise RuntimeError("Could not find edk2 code fd file")


def prepare_drive_options(vm_fn, arch, cdrom=None):
    drv_o = "if=pflash,format=raw"
    file_o = "if=virtio,format=qcow2"
    r = "readonly"
    s = "snapshot"
    if sys.platform == "darwin":
        d = find_edk2()
        drives = [
            "-drive",
            f"file={d}/edk2-aarch64-code.fd,{drv_o},unit=0,{r}=on",
            "-drive",
            f"file={d}/edk2-arm-vars.fd,{drv_o},unit=1,{s}=on,{r}=off",
        ]
    elif arch == "x86_64":
        ovmf = find_ovmf()
        drives = [
            "-drive",
            f"file={ovmf}/OVMF_CODE.fd,{drv_o},unit=0,{r}=on",
            "-drive",
            f"file={ovmf}/OVMF_VARS.fd,{drv_o},unit=1,{s}=on,{r}=off",
        ]
    else:
        edk2_file = find_edk2_code_fd()
        drives = ["-bios", f"{edk2_file}", "-boot", "efi"]

    drives += [
        "-drive",
        f"file={vm_fn},index=0,media=disk,{file_o},id=rootdisk,{s}=off",
    ]
    if cdrom:
        drives.append("-cdrom", cdrom)

    return drives


def prepare_cpu_memory_options():
    if sys.platform == "darwin":
        total_ram = get_total_ram_macos()
    else:
        total_ram = get_total_ram_linux()

    cpu_options = [
        "-smp",
        str(os.cpu_count()),
        "-m",
        highest_power_of_2(total_ram),
    ]

    return cpu_options


def prepare_network_options():
    port = find_open_port()
    net_options = [
        "-device",
        "virtio-net-pci,netdev=n0,mac=FE:40:64:26:D6:FF",
        "-netdev",
        f"user,id=n0,net=10.0.2.0/24,hostfwd=tcp::{port}-:22",
    ]

    return net_options


def prepare_graphic_options(graphic):
    if graphic:
        return [
            "-device",
            "virtio-gpu-pci",
            "-display",
            "default,show-cursor=on",
            "-device",
            "qemu-xhci",
            "-device",
            "usb-kbd",
            "-device",
            "usb-tablet",
        ]

    return ["-nographic"]


def qemu_available_accels(qemu):
    cmd = qemu + " -accel help"
    info = subprocess.check_output(cmd.split(" ")).decode("utf-8")
    accel_list = []
    for accel in ("kvm", "xen", "hvf", "hax", "tcg"):
        if info.find(accel) > 0:
            accel_list.append(accel)

    return accel_list


def prepare_qemu_command(vm_name, vm_fn, cdrom, graphic):
    arch = platform.machine()
    if arch == "x86_64":
        qemu = "qemu-system-x86_64"
        machine = "q35"
        cpu = "qemu64,+ssse3,+sse4.1,+sse4.2,+popcnt"
    else:
        qemu = "qemu-system-aarch64"
        machine = "virt"
        cpu = "cortex-a57"

    cmd = [
        qemu,
        "-machine",
        machine,
    ]
    accel_list = qemu_available_accels(qemu)
    accel_enabled = True
    if "kvm" in accel_list and exists("/dev/kvm"):
        cmd += ["-enable-kvm"]
    elif "hvf" in accel_list:
        cmd += ["-accel", "hvf"]
    else:
        accel_enabled = False

    cmd += ["-cpu"]
    if accel_enabled:
        cmd += ["host"]
    else:
        cmd += [cpu]

    cmd += prepare_drive_options(vm_fn, arch, cdrom)
    cmd += prepare_cpu_memory_options()
    cmd += prepare_network_options()
    cmd += prepare_graphic_options(graphic)

    return cmd


def run_vm(vm_name, cdrom=None, graphic=True, interactive=False):
    vm_fn = get_vm_fn(vm_name)

    if not vm_image_exists(vm_name):
        return

    print(f"Starting VM {vm_name}")
    cmd = prepare_qemu_command(vm_name, vm_fn, cdrom, graphic)
    return exec_cmd(cmd, True, not interactive)


def perror(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def qx(args):
    if False:
        print(*args)

    try:
        result = subprocess.run(args, capture_output=True, text=True)
        if result.stdout:
            return result.stdout.strip()

        return ""
    except Exception:
        perror(f"subprocess.run({args}, capture_output=True, text=True)")
        raise


def exec_cmd(args, stderr=True, daemonize=False):
    if False:
        print(*args)

    if not stderr:
        # redirecting stderr to /dev/null
        with open(os.devnull, "w") as devnull:
            os.dup2(devnull.fileno(), sys.stderr.fileno())

    if daemonize:
        # fork the process to create a daemon
        pid = os.fork()
        if pid > 0:
            # parent process, exit to allow child to run in the background
            sys.exit(0)

        # detach the child from terminal
        os.setsid()
        pid = os.fork()
        if pid > 0:
            # exit the second parent to fully detach
            sys.exit(0)

        # redirect stdin, stdout, and stderr to /dev/null
        with open(os.devnull, "r") as devnull_in, open(
            os.devnull, "a"
        ) as devnull_out:
            os.dup2(devnull_in.fileno(), sys.stdin.fileno())
            os.dup2(devnull_out.fileno(), sys.stdout.fileno())
            if stderr:
                os.dup2(devnull_out.fileno(), sys.stderr.fileno())

    try:
        return os.execvp(args[0], args)
    except Exception:
        perror(f"os.execvp({args[0]}, {args})")
        raise


def create_vm(vm_name):
    fn = os.path.join(get_vm_store(), vm_name) + ".qcow2"
    if exists(fn):
        print(f"Image {vm_name} already exists!")
        return

    statvfs = os.statvfs(".")
    free_space = statvfs.f_bavail * statvfs.f_frsize
    size = 1073741824  # 1 GB
    while size * 2 < free_space:
        size *= 2

    print(f"Creating new vm image {vm_name} with size {size}")
    return exec_cmd(["qemu-img", "create", "-f", "qcow2", fn, f"{size}"])


def stop_vm(vm_name):
    pid = 0
    vms = get_running_vms()
    for vm in vms:
        if vm["name"] == vm_name:
            pid = vm["pid"]

    if not pid:
        return print(f"No running vm found with image {vm_name}.")

    print(f"Stopping vm {vm_name}")
    os.kill(int(pid), signal.SIGTERM)
    return print(f"vm {vm_name} stopped.")


def delete_vm(vm_name):
    fn = os.path.join(get_vm_store(), vm_name) + ".qcow2"
    if exists(fn):
        print(f"Deleting vm image {vm_name}")
        os.remove(fn)
        return

    print(f"Image {vm_name} does not exist!")


def get_vm_store():
    if os.geteuid() == 0:
        return "/var/lib/boringvm/vms"

    return os.path.expanduser("~/.local/share/boringvm/vms")


def mkdir():
    os.makedirs(get_vm_store(), exist_ok=True)


def get_total_ram_macos():
    total_ram_bytes = qx(["sysctl", "-n", "hw.memsize"])
    return int(total_ram_bytes)


def get_total_ram_linux():
    with open("/proc/meminfo", "r") as meminfo:
        for line in meminfo:
            if "MemTotal" in line:
                # The value is in kB, so multiply by 1024 to get bytes
                total_ram_kb = int(line.split()[1])
                return total_ram_kb * 1024


def highest_power_of_2(n):
    power = 1073741824  # 1 GB
    while power * 2 < n:
        power *= 2

    return f"{power}B"


def add_ps_parser(subparsers):
    subparsers.add_parser("ps", help="list running vms")


def add_images_parser(subparsers):
    subparsers.add_parser("ls", help="list available vm images")


def add_run_parser(subparsers):
    run_parser = subparsers.add_parser("run", help="run a vm")
    run_parser.add_argument("vm_name", help="name of the vm to run")
    run_parser.add_argument("--cdrom", help="attach a cdrom image (.iso)")
    run_parser.add_argument(
        "--graphic", action="store_true", help="enable graphic mode"
    )
    run_parser.add_argument(
        "-i", "--interactive", action="store_true", help="interactive mode"
    )


def add_create_parser(subparsers):
    create_parser = subparsers.add_parser("create", help="create a vm image")
    create_parser.add_argument("vm_name", help="name of the vm to create")


def add_ssh_parser(subparsers):
    ssh_parser = subparsers.add_parser("ssh", help="ssh into a running vm")
    ssh_parser.add_argument("vm_name", help="name of the vm to ssh into")


def add_ssh_copy_id_parser(subparsers):
    ssh_copy_id_parser = subparsers.add_parser(
        "ssh-copy-id", help="copy ssh key to a running vm"
    )
    ssh_copy_id_parser.add_argument(
        "vm_name", help="name of the vm to copy ssh key into"
    )


def add_stop_parser(subparsers):
    stop_parser = subparsers.add_parser("stop", help="stop a running vm")
    stop_parser.add_argument("vm_name", help="name of the vm to stop")


def add_rm_parser(subparsers):
    rm_parser = subparsers.add_parser("rm", help="remove a vm image")
    rm_parser.add_argument("vm_name", help="name of the vm image to remove")


def main():
    parser = argparse.ArgumentParser(description="manage boring vms")
    subparsers = parser.add_subparsers(dest="command", required=True)
    add_ps_parser(subparsers)
    add_images_parser(subparsers)
    add_run_parser(subparsers)
    add_create_parser(subparsers)
    add_ssh_parser(subparsers)
    add_ssh_copy_id_parser(subparsers)
    add_stop_parser(subparsers)
    add_rm_parser(subparsers)
    args = parser.parse_args()
    mkdir()
    if args.command == "ps":
        list_running_vms()
    elif args.command == "ls":
        list_images()
    elif args.command == "run":
        run_vm(args.vm_name, args.cdrom, args.graphic, args.interactive)
    elif args.command == "create":
        create_vm(args.vm_name)
    elif args.command == "ssh":
        ssh_vm(args.vm_name)
    elif args.command == "ssh-copy-id":
        ssh_copy_id(args.vm_name)
    elif args.command == "stop":
        stop_vm(args.vm_name)
    elif args.command == "rm":
        delete_vm(args.vm_name)
    else:
        print(f"Unknown command: {args.command}")


if __name__ == "__main__":
    main()
