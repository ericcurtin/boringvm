#!/usr/bin/python3

from pathlib import Path
import os
import re
import subprocess
import sys
import time
import socket


def find_open_port(start_port=2222):
    port = start_port
    while True:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            try:
                s.bind(("localhost", port))
                return port  # If successful, return the open port
            except OSError:
                port += 1  # If the port is in use, try the next one


# Function to list running VMs and their corresponding ports
def get_running_vms():
    pids = qx(["pgrep", "qemu"])
    ret = []
    if not pids:
        return ret

    for pid in pids.splitlines():
        ps_result = qx(["ps", "-p", pid, "-o", "args=", "-ww"])
        name_match = re.search(r"/([\w\-]+)\.qcow2", ps_result)
        port_match = re.search(r"hostfwd=tcp::(\d+)", ps_result)
        if name_match and port_match:
            ret.append(
                {"name": name_match.group(1), "port": port_match.group(1)}
            )

    return ret


# Helper function to get destination and port based on VM name
def get_dest_and_port(vm_name):
    vms = get_running_vms()
    if "@" in vm_name:
        user, host = vm_name.split("@")
        dest = f"{user}@127.0.0.1"
    else:
        user, host = None, vm_name
        dest = "127.0.0.1"

    for vm in vms:
        if vm["name"] == host:
            return dest, vm["port"]

    return None, None


# Function to SSH into a VM using the correct port
def ssh_vm(vm_name):
    dest, port = get_dest_and_port(vm_name)
    if dest and port:
        print(f"Connecting to {vm_name} on port {port}")
        exec_cmd(["ssh", dest, "-o", "StrictHostKeyChecking=no", "-p", port])
    else:
        print(f"No running VM found with name {vm_name}.")


# Function to copy SSH key to the VM using the correct port
def ssh_copy_id(vm_name):
    dest, port = get_dest_and_port(vm_name)
    if dest and port:
        print(f"Copying SSH key to {vm_name} on port {port}")
        exec_cmd(["ssh-copy-id", "-p", port, dest])
    else:
        print(f"No running VM found with name {vm_name}.")


# Function to list running VMs
def list_running_vms():
    pses = get_running_vms()
    name_w = len("NAME")
    port_w = len("PORT")
    for ps in pses:
        name_w = max(name_w, len(ps["name"]))
        port_w = max(port_w, len(ps["port"]))

    print(f"{'NAME':<{name_w}} {'PORT':<{port_w}}")
    for ps in pses:
        print(f"{ps['name']:<{name_w}} {ps['port']:<{port_w}}")


def human_duration(d):
    if d < 1:
        return "Less than a second"
    elif d == 1:
        return "1 second"
    elif d < 60:
        return f"{d} seconds"
    elif d < 120:
        return "1 minute"
    elif d < 3600:
        return f"{d // 60} minutes"
    elif d < 7200:
        return "1 hour"
    elif d < 86400:
        return f"{d // 3600} hours"
    elif d < 172800:
        return "1 day"
    elif d < 604800:
        return f"{d // 86400} days"
    elif d < 1209600:
        return "1 week"
    elif d < 2419200:
        return f"{d // 604800} weeks"
    elif d < 4838400:
        return "1 month"
    elif d < 31536000:
        return f"{d // 2419200} months"
    elif d < 63072000:
        return "1 year"
    else:
        return f"{d // 31536000} years"


def list_files_by_modification():
    return sorted(
        Path().rglob("*"), key=lambda p: os.path.getmtime(p), reverse=True
    )


def human_readable_size(size):
    for unit in ["B", "KB", "MB", "GB", "TB"]:
        if size < 1024:
            size = round(size, 2)
            return f"{size} {unit}"

        size /= 1024

    return f"{size} PB"


def get_size(file):
    return human_readable_size(os.path.getsize(file))


def list_vms():
    mycwd = os.getcwd()
    os.chdir(get_vm_store())
    vms = []

    # Collect vm data
    for path in list_files_by_modification():
        name = str(path)
        file_epoch = path.lstat().st_mtime
        modified = int(time.time() - file_epoch)
        size = get_size(path)
        name = name[:-6]

        # Store data for later use
        vms.append({"name": name, "modified": modified, "size": size})

    os.chdir(mycwd)
    return vms


def list_images():
    vms = list_vms()

    # Calculate maximum width for each column
    name_w = len("NAME")
    mod_w = len("MODIFIED")
    size_w = len("SIZE")
    for vm in vms:
        modified = human_duration(vm["modified"]) + " ago"
        name_w = max(name_w, len(vm["name"]))
        mod_w = max(mod_w, len(modified))
        size_w = max(size_w, len(vm["size"]))

    print(f"{'NAME':<{name_w}} {'MODIFIED':<{mod_w}} {'SIZE':<{size_w}}")
    for vm in vms:
        print(
            f"{vm['name']:<{name_w}} {modified:<{mod_w}} {vm['size']:<{size_w}}"
        )


# Function to run a VM
def run_vm(vm_name, cdrom, graphic, interactive):
    fn = os.path.join(get_vm_store(), vm_name) + ".qcow2"
    if not os.path.exists(fn):
        print(f"Image {vm_name} does not exist!")
        return

    port = find_open_port()
    print(f"Starting VM {vm_name}")
    dir = "/opt/homebrew/share/qemu"
    drv_o = "if=pflash,format=raw"
    file_o = "if=virtio,format=qcow2"
    cmd = [
        "qemu-system-aarch64",
        "-device",
        "virtio-gpu-pci",
        "-display",
        "default,show-cursor=on",
        "-device",
        "qemu-xhci",
        "-device",
        "usb-kbd",
        "-device",
        "usb-tablet",
        "-drive",
        f"file={dir}/edk2-aarch64-code.fd,{drv_o},unit=0,readonly=on",
        "-drive",
        f"file={dir}/edk2-arm-vars.fd,{drv_o},unit=1,snapshot=on,readonly=off",
        "-smp",
        str(os.cpu_count()),
        "-accel",
        "hvf",
        "-m",
        highest_power_of_2(get_total_ram_macos()),
        "-machine",
        "virt",
        "-cpu",
        "host",
        "-device",
        "virtio-net-pci,netdev=n0,mac=FE:40:64:26:D6:FF",
        "-netdev",
        f"user,id=n0,net=10.0.2.0/24,hostfwd=tcp::{port}-:22",
        "-drive",
        f"file={fn},index=0,media=disk,{file_o},id=rootdisk,snapshot=off",
    ]

    if not graphic:
        cmd += ["-nographic"]

    if cdrom:
        cmd += ["-cdrom", cdrom]

    exec_cmd(cmd, True, not interactive)


def perror(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def qx(args):
    if False:
        print(*args)

    try:
        result = subprocess.run(args, capture_output=True, text=True)
        if result.stdout:
            return result.stdout.strip()

        return ""
    except Exception:
        perror(f"subprocess.run({args}, capture_output=True, text=True)")
        raise


def exec_cmd(args, stderr=True, daemonize=False):
    if False:
        print(*args)

    if not stderr:
        # Redirecting stderr to /dev/null
        with open(os.devnull, "w") as devnull:
            os.dup2(devnull.fileno(), sys.stderr.fileno())

    if daemonize:
        # Fork the process to create a daemon
        pid = os.fork()
        if pid > 0:
            # Parent process, exit to allow child to run in the background
            sys.exit(0)

        # Detach the child from terminal
        os.setsid()
        pid = os.fork()
        if pid > 0:
            # Exit the second parent to fully detach
            sys.exit(0)

        # Redirect stdin, stdout, and stderr to /dev/null
        with open(os.devnull, "r") as devnull_in, open(
            os.devnull, "a"
        ) as devnull_out:
            os.dup2(devnull_in.fileno(), sys.stdin.fileno())
            os.dup2(devnull_out.fileno(), sys.stdout.fileno())
            if stderr:
                os.dup2(devnull_out.fileno(), sys.stderr.fileno())

    try:
        return os.execvp(args[0], args)
    except Exception:
        perror(f"os.execvp({args[0]}, {args})")
        raise


# Function to create a VM image
def create_vm(vm_name):
    fn = os.path.join(get_vm_store(), vm_name) + ".qcow2"
    if os.path.exists(fn):
        print(f"Image {vm_name} already exists!")
        return

    statvfs = os.statvfs(".")
    free_space = statvfs.f_bavail * statvfs.f_frsize
    size = 1073741824  # 1 GB
    while size * 2 < free_space:
        size *= 2

    print(f"Creating new VM image {vm_name} with size {size}")
    exec_cmd(["qemu-img", "create", "-f", "qcow2", fn, f"{size}"])


# Function to stop a running VM (by killing the QEMU process)
def stop_vm(vm_name):
    print(f"Stopping VM {vm_name}")
    result = qx(["pgrep", "-f", vm_name])
    if result:
        pid = result
        os.kill(int(pid), 9)
        print(f"VM {vm_name} stopped.")
        return

    print(f"No running VM found with image {vm_name}.")


# Function to delete a VM image
def delete_vm(vm_name):
    fn = os.path.join(get_vm_store(), vm_name) + ".qcow2"
    if os.path.exists(fn):
        print(f"Deleting VM image {vm_name}")
        os.remove(fn)
        return

    print(f"Image {vm_name} does not exist!")


def get_vm_store():
    if os.geteuid() == 0:
        return "/var/lib/boringvm/vms"

    return os.path.expanduser("~/.local/share/boringvm/vms")


def mkdir():
    os.makedirs(get_vm_store(), exist_ok=True)


def get_total_ram_macos():
    total_ram_bytes = qx(["sysctl", "-n", "hw.memsize"])
    return int(total_ram_bytes)


def highest_power_of_2(n):
    power = 1073741824  # 1 GB
    while power * 2 < n:
        power *= 2

    return f"{power}B"


def main():
    if len(sys.argv) < 2:
        print("usage: boringvm <command> [<args>]")
        return

    mkdir()
    command = sys.argv[1]
    if command == "ps":
        list_running_vms()
    elif command == "images":
        list_images()
    elif command == "run":
        if len(sys.argv) < 3:
            print("usage: boringvm run <vm_name>")
            return

        if "--cdrom" in sys.argv:
            cdrom = sys.argv[sys.argv.index("--cdrom") + 1]
        else:
            cdrom = False

        if "--graphic" in sys.argv:
            graphic = True
        else:
            graphic = False

        if "-i" in sys.argv:
            interactive = True
        else:
            interactive = False

        vm_name = sys.argv[2]
        run_vm(vm_name, cdrom, graphic, interactive)
    elif command == "create":
        if len(sys.argv) < 3:
            print("usage: boringvm create <vm_name>")
            return

        vm_name = sys.argv[2]
        create_vm(vm_name)
    elif command == "ssh":
        if len(sys.argv) < 3:
            print("usage: boringvm ssh <vm_name>")
            return

        vm_name = sys.argv[2]
        ssh_vm(vm_name)
    elif command == "ssh-copy-id":
        if len(sys.argv) < 3:
            print("usage: boringvm ssh-copy-id <vm_name>")
            return

        vm_name = sys.argv[2]
        ssh_copy_id(vm_name)
    elif command == "stop":
        if len(sys.argv) < 3:
            print("usage: boringvm stop <vm_name>")
            return

        vm_name = sys.argv[2]
        stop_vm(vm_name)
    elif command == "rm":
        if len(sys.argv) < 3:
            print("usage: boringvm rm <vm_name>")
            return

        vm_name = sys.argv[2]
        delete_vm(vm_name)
    else:
        print(f"Unknown command: {command}")


if __name__ == "__main__":
    main()
